name: Composite actions for release

inputs:
  GITHUB_TOKEN:
    description: 'The Github token from the calling workflow'
    required: true
  release-version:
    description: 'The version number to use for the new release, default converts snapshot version in POM to release version'
    required: false
outputs:
  release-version:
    description: 'The version number that was actually used for the release'
    value: ${{ steps.set-output-values.outputs.release-version }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: git config
      run: |
        git config user.email "rld@reallifedeveloper.com"
        git config user.name "RealLifeDeveloper"
      shell: bash
    - name: Use version number from input
      if: ${{ inputs.release-version != '' }}
      run: |
        mvn versions:set -DnewVersion=${{ inputs.release-version }} -DgenerateBackupPoms=false
        RELEASE_VERSION=${{ inputs.release-version }}
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
      shell: bash
    - name: Use version number from POM
      if: ${{ inputs.release-version == '' }}
      run: |
        mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
        RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
      shell: bash
    - name: Create release branch
      run: |
        git checkout -b release/$RELEASE_VERSION
        git commit -a -m "New release candidate $RELEASE_VERSION"
        git push -u origin release/$RELEASE_VERSION
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      shell: bash
    - name: Create release tag
      run: |
        git tag v$RELEASE_VERSION
        git push origin v$RELEASE_VERSION
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      shell: bash
    - name: Bump version number in POM to next snapshot version
      if: ${{ inputs.release-version == '' }}
      run: |
        git checkout master
        mvn versions:set -DnextSnapshot -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "Bumped POM to next snapshot version"
        git push
      shell: bash
    - name: Set output values
      id: set-output-values
      run: |
        echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      shell: bash

